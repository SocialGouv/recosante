generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotifationEnum {
  morning
  evening
  alert
}

enum IndicatorsSlugEnum {
  indice_atmospheric
  indice_uv
  pollen_allergy
  weather_alert
  // episode_pollution_atmospheric
  bathing_water
  // tap_water
}

model User {
  id                       String              @id @default(uuid())
  matomo_id                String              @unique
  appversion               String?
  appbuild                 String?
  appdevice                String?
  municipality_insee_code  String? // code INSEE
  municipality_name        String?
  municipality_zip_code    String?
  push_notif_token         String?
  created_at               DateTime            @default(now())
  updated_at               DateTime            @default(now()) @updatedAt
  deleted_at               DateTime?
  deleted_because          String?
  favorite_indicator       IndicatorsSlugEnum?
  notifications_preference NotifationEnum[]    @default([evening, alert])
  notifications            Notification[]
  feedbacks                Feedback[]

  @@index([push_notif_token], type: Hash)
}

enum DataAvailabilityEnum {
  AVAILABLE // Données disponibles
  NOT_AVAILABLE // Données non disponibles
}

enum AlertStatusEnum {
  NOT_ALERT_THRESHOLD // Pas de dépassement du seuil d'alerte
  ALERT_NOTIFICATION_NOT_SENT_YET // Dépassement du seuil d'alerte mais pas encore de notification envoyée
  ALERT_NOTIFICATION_SENT // Dépassement du seuil d'alerte et notification envoyée
  ALERT_NOTIFICATION_ERROR // Dépassement du seuil d'alerte et notification en erreur
}

model IndiceUv {
  id String @id @default(uuid())

  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality         @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum @default(AVAILABLE)
  alert_status            AlertStatusEnum      @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @default(now()) @updatedAt
  // specific fields for this indicator
  uv_j0                   Int? // the day of validity_start
  uv_j1                   Int? // the day + 1 of validity_start
  uv_j2                   Int? // the day + 2 of validity_start
  uv_j3                   Int? // the day + 3 of validity_start

  // index by municipality_insee_code and diffusion_date desc and validity_start asc
  @@index([municipality_insee_code, diffusion_date, validity_start], name: "indice_uv_municipality_insee_code_diffusion_date_validity_start")
}

// REAP - Risque d'Exposition aux Allergènes Polliniques

model PollenAllergyRisk {
  id                      String               @id @default(uuid())
  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality         @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum @default(AVAILABLE)
  alert_status            AlertStatusEnum      @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @default(now()) @updatedAt
  // specific fields for this indicator
  cypres                  Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  noisetier               Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  aulne                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  peuplier                Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  saule                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  frene                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  charme                  Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  bouleau                 Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  platane                 Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  chene                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  olivier                 Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  tilleul                 Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  chataignier             Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  rumex                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  graminees               Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  plantain                Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  urticacees              Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  armoises                Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  ambroisies              Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé
  total                   Int? // 0: risque nul, 1: très faible, 2: faible, 3: moyen, 4: élevé, 5: très élevé

  @@index([municipality_insee_code, diffusion_date, validity_start], name: "pollen_municipality_insee_code_diffusion_date_validity_start")
}

// Vigilance Météo par MétéoFrance
model WeatherAlert {
  id String @id @default(uuid())

  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality         @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum @default(AVAILABLE)
  alert_status            AlertStatusEnum      @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @default(now()) @updatedAt
  // specific fields for this indicator
  violent_wind            Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  rain_flood              Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  storm                   Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  flood                   Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  snow_ice                Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  heat_wave               Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  cold_wave               Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  avalanche               Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum
  waves_submersion        Int? // NULL, 1, 2, 3, 4 - check WeatherAlertColorIdEnum

  @@index([municipality_insee_code, diffusion_date, validity_start], name: "weather_alert_insee_code_diffusion_date_validity_start")
  @@index([violent_wind, rain_flood, storm, flood, snow_ice, heat_wave, cold_wave, avalanche, waves_submersion])
}

model IndiceAtmospheric {
  id                      String               @id @default(uuid())
  // we define a unique composed key to avoid duplicates
  unique_composed_key     String               @unique(map: "municipality_insee_code+date_maj+date_ech")
  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality         @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum @default(AVAILABLE)
  alert_status            AlertStatusEnum      @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @default(now()) @updatedAt
  // specific fields for this indicator, raw data extracted from the API
  // note: we couldn't use Prisma enum here because
  // Prisma enum are restricted to: start with letter, no space, etc.
  // the API returns numbers, letters, spaces, etc. soo
  // we specify out TypeScript types in comment instead
  code_no2                Int? // PolluantQualificatifsNumberEnum
  code_o3                 Int? // PolluantQualificatifsNumberEnum
  code_pm10               Int? // PolluantQualificatifsNumberEnum
  code_pm25               Int? // PolluantQualificatifsNumberEnum
  code_so2                Int? // PolluantQualificatifsNumberEnum
  code_qual               Int? // PolluantQualificatifsNumberEnum - average of all polluants
  lib_qual                String? // PolluantQualificatifsLabelEnum
  date_maj                String? // example: '2024/01/16 12:11:49.728+01';
  date_dif                String? // example: '2024/01/16'; this is the day we fetched the data
  date_ech                String? // example: '2024-01-15'; this is the validity day of the data
  code_zone               String? // Municipality['COM'] | Municipality['EPCI'];
  source                  String? // SourcesEnum
  type_zone               String? // TypeZoneEnum
  // unused fields from the API
  partition_field         String? // example: '112024w3'; no idea what this is
  coul_qual               String? // PolluantQualificatifsColorEnum
  lib_zone                String? // Label/name of Municipality or EPCI. example: 'Gastins';
  aasqa                   String? // Municipality['DEP'];
  gml_id                  Int? // example: 835197777; no idea what this is
  epsg_reg                String? // ESPGEnum
  x_reg                   Float? // example: 650403.898030424;
  x_wgs84                 Float? // example: 3.01999928628953;
  y_reg                   Float? // example: 2403379.42595027;
  y_wgs84                 Float? // example: 48.6270847202683;

  @@index([municipality_insee_code, diffusion_date, validity_start], name: "indice_atmo_insee_code_diffusion_date_validity_start")
}

enum BathgWaterIdCarteEnum {
  gua
  mar
  guy
  reu
  may
  fra
}

enum BathingWaterResultEnum {
  GOOD // Bon résultat
  AVERAGE // Résultat moyen
  POOR // Mauvais résultat
  NO_RESULT_FOUND // Pas de prélèvement
}

enum BathingWaterCurrentYearGradingEnum {
  EXCELLENT // Site dont l'eau est d'excellente qualité
  GOOD // Site dont l'eau est de bonne qualité
  SUFFICIENT // Site dont l'eau est de qualité suffisante
  POOR // Site dont l'eau est de qualité insuffisante
  INSUFFICIENTLY_SAMPLED // Site dont l'eau est insuffisamment échantillonnée
  UNRANKED_SITE // Site non classé
  PROHIBITION // Site interdit à la baignade
  OFF_SEASON // Site en dehors de la saison de baignade
}

model BathingWater {
  id String @id @default(uuid())

  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality                        @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum                @default(AVAILABLE)
  alert_status            AlertStatusEnum                     @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime                            @default(now())
  updated_at              DateTime                            @default(now()) @updatedAt
  // specific fields for this indicator
  id_carte                BathgWaterIdCarteEnum?
  name                    String? // example: "PLAN D'EAU D'ANGLEFORT"
  isite                   String? // example: "001165"
  dptddass                String? // example: "001" - DEP code padStarted with 0
  id_site                 String? // composition of dptddass + isite
  result_date             DateTime? // example: "2021-06-30T00:00:00.000Z"
  result_value            BathingWaterResultEnum? // example: "GOOD"
  current_year_grading    BathingWaterCurrentYearGradingEnum? // example: "GOOD"
  swimming_season_start   String? // example: "2021-06-01"
  swimming_season_end     String? // example: "2021-09-30"
  consult_site_url        String? // example: "https://baignades.sante.gouv.fr/baignades/consultSite.do?dptddass=013&site=013000808&annee=2023&plv=all"

  @@index([municipality_insee_code, id_site, diffusion_date], name: "bathing_water_insee_code_id_site_diffusion_date")
}

enum PollutionStateEnum {
  ALERT // ALERTE
  INFORMATION_AND_RECOMMANDATION // INFORMATION ET RECOMMANDATION
  NO_ALERT // PAS DE DEPASSEMENT
  ALERT_PERSISTANCE // ALERTE SUR PERSISTANCE
}

enum PollutionCodeEnum {
  SULFUR_DIOXIDE // Dioxyde de soufre - code 1
  NITROGEN_DIOXIDE // Dioxyde d'azote - code 3 / code 8
  FINES_PARTICLES // Particules fines PM10 - code 5
  OZONE // Ozone - code 7
  PM10 // Particules en suspension PM10 - code 24
  PM25 // Particules en suspension PM2.5 - code 39
  BENZENE // Benzène - code 60
}

model AlertPollutionAtmospheric {
  id String @id @default(uuid())

  // common fields for all indicators
  municipality_insee_code String
  municipality            Municipality         @relation(fields: [municipality_insee_code], references: [COM])
  validity_start          DateTime // the date is the first date of the validity period, included
  validity_end            DateTime // the date is the last date of the validity period, included
  diffusion_date          DateTime
  data_availability       DataAvailabilityEnum @default(AVAILABLE)
  alert_status            AlertStatusEnum      @default(NOT_ALERT_THRESHOLD)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @default(now()) @updatedAt
  // specific fields for this indicator
  state                   PollutionStateEnum
  code                    PollutionCodeEnum
  comment_short           String
  comment_long            String
}

model CronJob {
  id         String   @id @default(uuid())
  unique_key String   @unique
  name       String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Municipality {
  COM                       String                      @id // Code commune
  TYPECOM                   String
  REG                       String // Code région
  DEP                       String // Code département
  CTCD                      String? // Code de la collectivité territoriale ayant les compétences départementales
  ARR                       String? // Code arrondissement
  CAN                       String? // Code canton. Pour les communes « multi-cantonales », code décliné de 99 à 90 (pseudo-canton) ou de 89 à 80 (communes nouvelles)
  EPCI                      String? // Code EPCI
  LIBEPCI                   String? // Nom de l'EPCI ou métropole
  TNCC                      String? //  Type de nom en clair (majuscules) (https://www.insee.fr/fr/information/2114773)
  NCC                       String? // Nom en clair (majuscules)
  NCCENR                    String? // Nom en clair (typographie riche)
  LIBELLE                   String? // Nom en clair (typographie riche) avec article
  COMPARENT                 String? // Code de la commune parente pour les arrondissements municipaux et les communes associées ou déléguées.
  bathing_water_sites       Int                         @default(0)
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @default(now()) @updatedAt
  IndiceUv                  IndiceUv[]
  PollenAllergyRisk         PollenAllergyRisk[]
  WeatherAlert              WeatherAlert[]
  IndiceAtmospheric         IndiceAtmospheric[]
  AlertPollutionAtmospheric AlertPollutionAtmospheric[]
  BathingWater              BathingWater[]
}

enum SeasonEnum {
  Printemps
  Ete
  Automne
  Hiver
  Toute
}

model Recommandation {
  unique_key             String             @id @unique // the key is the combination of indicator + indicator_value + recommandation_id
  recommandation_id      String
  recommandation_content String
  indicator              IndicatorsSlugEnum
  indicator_value        Int
  type_weather_alert     String? // only for WeatherAlert
  created_at             DateTime           @default(now())
  updated_at             DateTime           @default(now()) @updatedAt
  seasons                SeasonEnum[]

  @@index([indicator, indicator_value], name: "recommandation_indeicator_indicator_value")
}

model Notification {
  id               String   @id @default(uuid())
  user_id          String
  user             User     @relation(fields: [user_id], references: [id])
  title            String
  body             String
  data             String
  ticket           String? // for debug purpose
  error            String? // for debug purpose
  push_notif_token String // for debug purpose
  appversion       String? // for debug purpose
  appbuild         String? // for debug purpose
  appdevice        String? // for debug purpose
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
}

model Feedback {
  id         String   @id @default(uuid())
  score      Int
  message    String?
  contact    String?
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}
